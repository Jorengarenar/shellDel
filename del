#!/usr/bin/env sh

# SPDX-License-Identifier: GPL-2.0-or-later
#   Copyright (c) 2009-2011  Robert Rothenberg <robrwo@gmail.com>
#   Copyright (c)      2022       Jorengarenar <dev@joren.ga>

version="0.4.0"

progname="$(basename $0)"

verbose=0
interactive="never"

usage() {
    cat << EOU
Usage: ${progname} [OPTION]... FILE...

Move files into the trash.

Options:
  --version	show program's version number and exit
  -h		show this help message and exit
  -v		explain what is being done
  -i		prompt before moving every file
  -r, -R	ignored (for compatability with rm)
  -f		ignore non-existent files, never prompt
EOU
}

try_help() {
    echo "Try \`${progname} -h' for more information." 1>&2
    exit 1
}

encode() {
    echo "$1" | sed -e 's/ /%20/g
        s/!/%21/g
        s/"/%22/g
        s/\#/%23/g
        s/\$/%24/g
        s/\&/%26/g
        s/'\''/%27/g
        s/(/%28/g
        s/)/%29/g
        s/\*/%2a/g
        s/+/%2b/g
        s/,/%2c/g
        s/-/%2d/g
        s/:/%3a/g
        s/;/%3b/g
        s//%3e/g
        s/?/%3f/g
        s/@/%40/g
        s/\[/%5b/g
        s/\\/%5c/g
        s/\]/%5d/g
        s/\^/%5e/g
        s/_/%5f/g
        s/`/%60/g
        s/{/%7b/g
        s/|/%7c/g
        s/}/%7d/g
        s/~/%7e/g
        s/	/%09/g'
}

get_trashdir() {
    dir="$1"

    mounts="$(awk '{ print $2 }' /proc/mounts)"
    base="/"

    if [ "$EUID" != "0" ]; then
        mounts="$HOME $mounts"
    fi

    for mnt in $mounts; do
        if [ -z "${dir##$mnt*}" ]; then
            if [ -z "${mnt##$base*}" ]; then
                base="$mnt"
            fi
        fi
    done

    if [ "$base" != "$HOME" ]; then
        trashdir="$base/.Trash/$UID"
        if [ ! -d "$trashdir" ]; then
            trashdir="$base/.Trash-$UID"
        fi

        mkdir -p "$trashdir"
        if [ "$?" != "0" ]; then
            base="$HOME"
        fi
    fi

    if [ "$base" == "$HOME" ]; then
        base="${XDG_DATA_HOME:-$HOME/.local/share}"
        trashdir="$base/Trash"
    fi

    echo "$trashdir"
}

can_trash() {
    filename="$1"

    if [ ! -e "$filename" ]; then
        if [ "$interactive" != "force" ]; then
            echo "${progname}: cannot move \`$filename' to trash: No such file or directory" 1>&2
        fi
        return 1
    else
        type="file"
        if [ -d "$filename" ]; then
            type="directory"
        fi

        case $interactive in
            never|force) ;;
            always)
                read -p "${progname}: move ${type} '${filename}' to trash? [y/N]" yn
                case "$yn" in
                    y|Y|yes) ;;
                    *) return 1 ;;
                esac
                ;;
            *)
                echo "${progname}: unsupported value interactive=${interactive}" 1>&2
                exit 1
                ;;
        esac
    fi

    return 0
}

init_trashdir() {
    trashdir="$1"

    mkdir -p "$trashdir/files"
    if [ "$?" != "0" ]; then
        echo "${progname}: unable to write to $trashdir" 1>&2
        exit 2
    fi

    mkdir -p "$trashdir/info"
    if [ "$?" != "0" ]; then
        echo "${progname}: unable to write to $trashdir" 1>&2
        exit 2
    fi
}

trash_file() {
    filename="$1"

    dir="${filename%/*}"

    trashdir="$(get_trashdir "$dir")"
    init_trashdir "$trashdir"

    trashname="${filename##*/}"
    origname="${trashname%%.*}"
    if [ -z "${origname}" ]; then
        origname="dotfile"
    fi
    ext=".${trashname##*.}"
    if [ "$ext" == ".$trashname" ]; then
        ext=""
    fi

    # Use -u (unsafe) option because we cannot mv a directory into a file.
    #   This is technically "unsafe" but mv will ask for confirmation when overwriting.
    deletedfile="$(mktemp -u "${trashdir}/files/${origname}_XXXXXXXX" )$ext"
    deletedbase="$(basename "${deletedfile}")"
    deletedinfo="$trashdir/info/${deletedbase}.trashinfo"

    cat > "$deletedinfo" << END
[Trash Info]
Path=$(encode "$filename")
DeletionDate=$(date +"%FT%H:%M:%S")
END

    if [ "$verbose" != 0 ]; then
        mv_opts="-v"
    else
        mv_opts=
    fi

    # Note that the trashinfo file will have the ownership and
    # permissions of the person who deleted the file, and not
    # necessarily of the original file.

    mv $mv_opts "${filename}" "${deletedfile}"
    if [ "$?" != "0" ]; then
        echo "${progname}: unable to move ${filename} to ${deletedfile}" 1>&2
        rm "$deletedinfo"
        exit 2
    fi
}

# main {{{

if [ $# -eq 0 ]; then
    try_help
fi

while getopts hvirRf arg; do
    case $arg in
        h)   usage; exit 1 ;;
        i)   interactive="always" ;;
        v)   verbose=1 ;;
        r|R) ;;
        f)   interactive="force" ;;
        [?]) try_help; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

for f in "$@"; do
    filename="$(realpath -s "${f}")" # get full pathname of file
    if can_trash "$filename"; then
        trash_file "$filename"
    fi
done

exit 0

# main }}}
